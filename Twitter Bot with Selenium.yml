name: Run Twitter Bot with Selenium

on:
  schedule:
    # This cron job runs at 7 AM, 1 PM, and 7 PM UTC every day.
    # Adjust this to your desired schedule.
    - cron: '0 7,13,19 * * *'
  workflow_dispatch: # Allows you to manually trigger the workflow from the GitHub UI

jobs:
  run-twitter-bot:
    runs-on: ubuntu-latest # Uses the latest Ubuntu runner provided by GitHub

    steps:
      - name: Checkout repository
        # This action checks out your repository code so your workflow can access it.
        uses: actions/checkout@v4 # Recommended to use @v4 for better security and features

      - name: Set up Python
        # This action sets up the Python environment.
        uses: actions/setup-python@v5 # Recommended to use @v5 for better security and features
        with:
          python-version: '3.10' # Ensure this matches your project's Python version

      - name: Install Chrome and ChromeDriver
        # This step installs Google Chrome and a compatible ChromeDriver.
        # It dynamically determines the Chrome version to fetch the correct ChromeDriver.
        run: |
          # Add Google Chrome repository key
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /etc/apt/keyrings/google-chrome.gpg
          echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list > /dev/null

          # Update apt packages and install Google Chrome
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

          # Get Chrome version and download compatible ChromeDriver
          CHROME_MAJOR_VERSION=$(google-chrome --version | sed -E 's/Google Chrome ([0-9]+)\..*/\1/')
          echo "Detected Chrome major version: $CHROME_MAJOR_VERSION"

          CHROMEDRIVER_VERSION_URL="https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json"
          DOWNLOAD_URL=$(curl -s $CHROMEDRIVER_VERSION_URL | jq -r ".versions[] | select(.version | startswith(\"${CHROME_MAJOR_VERSION}.\")) | .downloads.chromedriver[] | select(.platform == \"linux64\") | .url")

          if [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: Could not find ChromeDriver download URL for Chrome version $CHROME_MAJOR_VERSION"
            exit 1
          fi

          echo "Downloading ChromeDriver from: $DOWNLOAD_URL"
          wget -q "$DOWNLOAD_URL" -O chromedriver.zip
          unzip chromedriver.zip -d /tmp/chromedriver_extracted
          sudo mv /tmp/chromedriver_extracted/chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

          echo "ChromeDriver installed at: /usr/local/bin/chromedriver"
          /usr/local/bin/chromedriver --version

      - name: Install Python dependencies
        # Installs necessary Python libraries.
        # Ensure you have a requirements.txt file in your repository root.
        run: |
          python -m pip install --upgrade pip
          pip install selenium requests-oauthlib schedule # Ensure these are also in requirements.txt for consistency
          pip install -r requirements.txt # This should contain all your Python dependencies (e.g., selenium, requests-oauthlib, schedule)

      - name: Run Twitter bot
        # Executes your Python script.
        # Ensure all necessary secrets are configured in your GitHub repository settings.
        env:
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}
          CHATGPT_EMAIL: ${{ secrets.CHATGPT_EMAIL }}
          CHATGPT_PASSWORD: ${{ secrets.CHATGPT_PASSWORD }}
          LOG_FILE: 'true' # Enables logging to twitter_bot.log
          GITHUB_ACTIONS: 'true' # Your script uses this to apply specific Chrome options
          POST_IMMEDIATELY: 'true' # Set to 'true' for immediate testing, 'false' for purely scheduled behavior
          # Optional: Define your topics or schedule times as environment variables if you prefer
          # TOPICS: '["ETL (Extract, Transform, Load) Processes", "Data Streaming Technologies"]'
          # SCHEDULE_TIMES: '["07:00", "13:00", "19:00"]'
          # RUN_DURATION_HOURS: '5' # How long run_scheduled_tweets_once should run (in hours)
        run: python twitter_bot.py

      - name: Upload logs
        # This step uploads the 'twitter_bot.log' file as a workflow artifact.
        # 'if: always()' ensures logs are uploaded even if previous steps fail.
        # The correct action name and version `actions/upload-artifact@v4` is used here.
        if: always()
        uses: actions/upload-artifact@v4 # **THIS IS THE CORRECTED LINE**
        with:
          name: twitter-bot-logs
          path: twitter_bot.log
          retention-days: 7 # Optional: How long to keep the artifact (default is 90 days)
